(window.webpackJsonp=window.webpackJsonp||[]).push([[79],{429:function(s,t,e){"use strict";e.r(t);var a=e(42),r=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"control-flow-in-ruby"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#control-flow-in-ruby"}},[s._v("#")]),s._v(" Control Flow in Ruby")]),s._v(" "),e("h2",{attrs:{id:"if문"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#if문"}},[s._v("#")]),s._v(" if문")]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("y \n  puts x\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elsif")]),s._v(" x"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("y\n  puts y\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  puts z\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n")])])]),e("p",[s._v("파이썬의 if문과 비슷하다. 그러나 "),e("code",[s._v("elsif")]),s._v(" 라는 것, 그리고 "),e("code",[s._v("end")]),s._v(" 로 끝낸다는 것을 주의하자")]),s._v(" "),e("h2",{attrs:{id:"unless"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unless"}},[s._v("#")]),s._v(" unless")]),s._v(" "),e("p",[s._v("해석 그대로 if not의 역할을 한다. 따라서 의미있는 변수이름을 사용하여야 할 것 같다")]),s._v(" "),e("div",{staticClass:"language-ruby extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[s._v("hungry "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("unless")]),s._v(" hungry\n  puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I\'m writing Ruby programs!"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n  puts "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Time to eat!"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("end")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ==> I'm writing Ruby programs!")]),s._v("\n")])])]),e("h2",{attrs:{id:"관계-연산자"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#관계-연산자"}},[s._v("#")]),s._v(" 관계 연산자")]),s._v(" "),e("p",[e("code",[s._v("==")]),s._v(", "),e("code",[s._v("!=")]),s._v(", "),e("code",[s._v("<")]),s._v(","),e("code",[s._v("<=")]),s._v(","),e("code",[s._v(">")]),s._v(","),e("code",[s._v(">=")]),s._v(",")]),s._v(" "),e("h2",{attrs:{id:"논리-연산자"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#논리-연산자"}},[s._v("#")]),s._v(" 논리 연산자")]),s._v(" "),e("p",[e("code",[s._v("&&")]),s._v(", "),e("code",[s._v("||")]),s._v(", "),e("code",[s._v("!")])]),s._v(" "),e("hr"),s._v(" "),e("blockquote",[e("p",[e("code",[s._v("object.include? (target)")])]),s._v(" "),e("p",[s._v("object에 target이 존재하는지 확인")]),s._v(" "),e("p",[e("code",[s._v("String.gsub(Regexp, str)")])]),s._v(" "),e("p",[s._v("String에서 정규식에 걸리는 표현을 찾아서 str로 바꿈")])])])}),[],!1,null,null,null);t.default=r.exports}}]);