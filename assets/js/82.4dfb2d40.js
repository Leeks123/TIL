(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{431:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"blocks-procs-lambdas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blocks-procs-lambdas"}},[t._v("#")]),t._v(" Blocks, Procs, Lambdas")]),t._v(" "),a("h2",{attrs:{id:"collect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collect"}},[t._v("#")]),t._v(" "),a("code",[t._v(".collect")])]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("my_nums "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nmy_nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("collect "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ==> [1, 4, 9]")]),t._v("\nmy_nums\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ==> [1, 2, 3]")]),t._v("\n\nmy_nums"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("collect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ==> [1, 4, 9]")]),t._v("\nmy_nums\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ==> [1, 4, 9]")]),t._v("\n\n")])])]),a("p",[a("code",[t._v("collect")]),t._v(" 는 모든 엘레먼트에 식을 적용한다. 그렇지만 복사본을 반환한다.")]),t._v(" "),a("h2",{attrs:{id:"yield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[t._v("#")]),t._v(" yield")]),t._v(" "),a("p",[t._v("메소드 내에 "),a("code",[t._v("yield")]),t._v(" 키워드를 통해 추가적인 내용을 넣을 수 있다.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token method-definition"}},[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yield_name")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"In the method! Let\'s yield."')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Kim"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"In between the yields!"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Block complete! Back in the method."')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n\nyield_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Eric"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"My name is '),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("#{")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token delimiter tag"}},[t._v("}")])]),t._v('."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In the method! Let's yield.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# My name is Kim.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# In between the yields!")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# My name is Eric.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Block complete! Back in the method.")]),t._v("\n")])])]),a("p",[a("code",[t._v("yield")]),t._v(" 키워드 부분은 블록의 내용이 실행됨")]),t._v(" "),a("h2",{attrs:{id:"proc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proc"}},[t._v("#")]),t._v(" proc")]),t._v(" "),a("p",[t._v("Proc는 일종의 저장된 블록이다. 재활용이 가능한 블록. 메서드랑 비슷한..")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("cube "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Proc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("collect"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("cube"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ==> [1, 8, 27]")]),t._v("\n")])])]),a("p",[a("code",[t._v("&")]),t._v(" 는 "),a("code",[t._v("proc")]),t._v(" 을 "),a("code",[t._v("block")]),t._v(" 으로 바꾸는 역할을 한다.")]),t._v(" "),a("h3",{attrs:{id:"proc-의-장점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proc-의-장점"}},[t._v("#")]),t._v(" "),a("code",[t._v("Proc")]),t._v(" 의 장점")]),t._v(" "),a("ol",[a("li",[t._v("Procs are full-fledged objects, so they have all the powers and abilities of objects. (Blocks do not.)")]),t._v(" "),a("li",[t._v("Unlike blocks, procs can be called over and over without rewriting them. This prevents you from having to retype the contents of your block every time you need to execute a particular bit of code.")])]),t._v(" "),a("h3",{attrs:{id:"call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[t._v("#")]),t._v(" "),a("code",[t._v(".call")])]),t._v(" "),a("p",[a("code",[t._v("call")]),t._v(" 메서드를 통해 proc을 직접 호출할 수 있다.")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("hi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Proc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("puts "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nhi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("call\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ==> Hello!")]),t._v("\n")])])]),a("h2",{attrs:{id:"lambda"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lambda"}},[t._v("#")]),t._v(" Lambda")]),t._v(" "),a("div",{staticClass:"language-ruby extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ruby"}},[a("code",[t._v("lambda "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("param"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" block "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"람다와-프록의-차이"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#람다와-프록의-차이"}},[t._v("#")]),t._v(" 람다와 프록의 차이")]),t._v(" "),a("ol",[a("li",[t._v("람다는 인자의 수를 체크한다. 인자 수가 잘못 됬다면 error를 던진다. 반면 프록은 "),a("code",[t._v("nil")])]),t._v(" "),a("li",[t._v("람다가 리턴할 때 컨트롤을 호출메서드로 다시 넘기지만, 프록은 그냥 그대로 끝냄")])])])}),[],!1,null,null,null);s.default=n.exports}}]);