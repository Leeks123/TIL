(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{389:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scope"}},[t._v("#")]),t._v(" Scope")]),t._v(" "),a("h2",{attrs:{id:"스코프와-존재"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#스코프와-존재"}},[t._v("#")]),t._v(" 스코프와 존재")]),t._v(" "),a("ul",[a("li",[t._v("**스코프(=가시성)**는 프로그램의 현재 실행 중인 부분, 실행 컨텍스트에서 현재 보이고 접근할 수 있는 식별자")]),t._v(" "),a("li",[a("strong",[t._v("존재")]),t._v(" 한다는 것은 식별자가 메모리가 할당된 무언가를 가리킨다는 뜻..\n존재하지만 스코프 안에는 없는 변수가 있을 수 있음")])]),t._v(" "),a("h2",{attrs:{id:"변수-숨기기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#변수-숨기기"}},[t._v("#")]),t._v(" 변수 숨기기")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 외부 블록")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "red"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 내부 블록")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "red"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typedof x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "undefined"')]),t._v("\n")])])]),a("p",[t._v("외부 블록에서의 변수 "),a("code",[t._v("x")]),t._v(" 는 내부 블록에서 정의된 새로운 "),a("code",[t._v("x")]),t._v(" 에 의해 숨겨진다. 실행흐름이 내부 블록에 들어가 새 변수 "),a("code",[t._v("x")]),t._v(" 를 정의하는 순간, 두 변수가 모두 스코프 안에 있다. 그러나 외부 블록의 변수는 접근할 방법이 없다.")]),t._v(" "),a("h2",{attrs:{id:"클로저"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#클로저"}},[t._v("#")]),t._v(" 클로저")]),t._v(" "),a("p",[a("strong",[t._v("클로저")]),t._v(" : 함수가 특정 스코프에 접근할 수 있도록 의도적으로 그 스코프에 정의하는 경우")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" globalFunc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" blockVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("globalFunc")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("blockVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("globalFunc")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "a"')]),t._v("\n")])])]),a("p",[a("code",[t._v("globalFunc")]),t._v(" 는 블록 안에서 값을 할당받았다. 이 블록 스코프와 그 부모인 전역 스코프가 클로저를 형성하여, 함수를 어디에서 호출하든, 클로저에 들어 있는 변수에 접근할 수 있다.")]),t._v(" "),a("h2",{attrs:{id:"함수-스코프와-호이스팅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#함수-스코프와-호이스팅"}},[t._v("#")]),t._v(" 함수 스코프와 호이스팅")]),t._v(" "),a("h3",{attrs:{id:"함수-스코프"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#함수-스코프"}},[t._v("#")]),t._v(" 함수 스코프")]),t._v(" "),a("p",[a("code",[t._v("var")]),t._v(" 변수를 프로그램의 가장 바깥에서 정의하면 전역변수, 이외에 함수 내부에서 정의된 "),a("code",[t._v("var")]),t._v(" 변수의 스코프는 함수 내부이다. "),a("br")]),t._v(" "),a("p",[t._v("함수 안에서 "),a("code",[t._v("var")]),t._v(" 키워드를 사용하지 않고 변수할당을 하면 그 변수는 전역변수가 된다.")]),t._v(" "),a("p",[a("code",[t._v("for")]),t._v(", "),a("code",[t._v("while")]),t._v(", "),a("code",[t._v("switch")]),t._v(", "),a("code",[t._v("if")]),t._v(" 등의 코드에서 사용한 "),a("code",[t._v("var")]),t._v(" 변수도 계속 남아 있게되어 변수의 스코프 문제가 발생할 수 있다.")]),t._v(" "),a("h3",{attrs:{id:"호이스팅"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#호이스팅"}},[t._v("#")]),t._v(" 호이스팅")]),t._v(" "),a("p",[a("code",[t._v("var")]),t._v(" 로 정의된 변수는 그 변수가 속한 스코프의 최상단으로 끌어올려진다.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("위의 코드처럼 호이스팅되어서 정의는 끌어올려지지만 값 할당까지는 이뤄지지 않는다.")]),t._v(" "),a("p",[a("code",[t._v("const")]),t._v(", "),a("code",[t._v("let")]),t._v(" 은 블록 스코프이다. "),a("br")]),t._v(" "),a("p",[t._v("호이스팅도 가능하다. 하지만 변수를 정의하기 전에 그 변수를 사용하려고 하면 참조에러를 발생시킨다.")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 참조 에러")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" n2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("const")]),t._v(" 로 정의된 변수는 재할당이 불가능하다. "),a("code",[t._v("const")]),t._v(" 로 정의된 변수를 재할당하면 에러가 발생한다. "),a("br")]),t._v(" "),a("p",[a("code",[t._v("const")]),t._v(" 로 정의된 객체의 내부 값의 수정은 가능하다는 점은 주의")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  2")]),t._v("\n")])])]),a("p",[a("code",[t._v("var")]),t._v(" 를 이용해 변수를 선언하면 자바스크립트는 같은 변수를 여러번 정의하더라도 무시한다. "),a("code",[t._v("if")]),t._v(" 문에서 선언된 "),a("code",[t._v("x")]),t._v(" 는 새롭게 정의된 변수가 아니라 바깥 에서 선언된 "),a("code",[t._v("x")]),t._v(" 이다.")]),t._v(" "),a("p",[t._v("괜히 헷갈리니까 그냥 "),a("code",[t._v("let")]),t._v(" 을 씁시다")])])}),[],!1,null,null,null);s.default=e.exports}}]);